---
import Layout from "../layouts/Layout.astro";
import Activity from "../components/Activity";
import { ApiPath } from "../utils/apiPath";

const res = await fetch(`${ApiPath}student-tasks/by-student-id/1`);
const studentTasks = await res.json();

// Obtener los detalles de los tasks individuales
const enrichedTasks = await Promise.all(
  studentTasks.map(async (studentTask) => {
    const taskRes = await fetch(`${ApiPath}tasks/${studentTask.taskId}`);
    const task = await taskRes.json();

    return {
      ...studentTask,
      title: task.title,
      typeTask: task.typeTask,
      dueDate: task.dueDate,
      points: task.points,
      courseTitle: "Curso 1",
    };
  })
);

const priorityOrder = {
  URGENT_AND_IMPORTANT: 1,
  NOT_URGENT_BUT_IMPORTANT: 2,
  URGENT_BUT_NOT_IMPORTANT: 2,
  NOT_URGENT_AND_NOT_IMPORTANT: 3,
} as const;

enrichedTasks.sort((a, b) => priorityOrder[a.importance] - priorityOrder[b.importance]);
---

<Layout>
  <main class="w-full px-8 pt-4">
    <h1 class="text-2xl font-bold mb-4">Mis actividades <span class="text-xl font-extrabold">({enrichedTasks.length})</span></h1>

    <div class="flex flex-col gap-4">
      {
        enrichedTasks.map(task => (
          <Activity
            client:load
            id={task.id}
            name={task.title}
            typeActivity={task.typeTask}
            course={task.courseTitle}
            isRated={task.points > 0}
            dueDate={task.dueDate}
            points={task.points}
            importance={task.importance}
            urgency={task.urgency}
          />

        ))
      }
    </div>
  </main>
</Layout>
