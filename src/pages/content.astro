---
import { Icon } from "astro-icon/components";
import Layout from "../layouts/Layout.astro";
import Week from "../components/Week.astro";
import HeaderCourse from "../components/HeaderCourse.astro";
import Description from "../components/Description.astro";
import { ApiPath } from "../utils/apiPath";

// Recuperamos el `courseId` desde `Astro.props`
const { courseId } = Astro.props;

// Validación de courseId, asignamos 1 si no está definido o es inválido
let courseIdn = courseId && !isNaN(courseId) ? parseInt(courseId) : 1;

const fetchUnits = async () => {
  try {
    // Mostramos en consola el `courseId` que se usará en la consulta
    console.log("Fetching units for courseId:", courseIdn);

    const res = await fetch(`${ApiPath}units/by-course/${courseIdn}`);
    if (!res.ok) {
      throw new Error("Failed to fetch units");
    }
    return await res.json();
  } catch (error) {
    console.error("Error fetching units:", error);
    return [];
  }
};

const units = await fetchUnits();
---

<Layout>
  <main class="w-full px-8">
    <HeaderCourse />
    <div class="flex flex-col gap-4 py-4">
      <Description
          svg="Megaphone"
          description='Recuerda que las evaluaciones de los cursos virtuales con Zoom "en vivo" y de los cursos virtuales a través de la plataforma UTP+Class, en donde se contemplen trabajos grupales, tendrán la flexibilidad de ser entregadas de forma individual o grupal. Es decir, puedes decidir si formarás un grupo para entregar tus evaluaciones o decidir hacerlo individualmente, lo que mejor se adapte a tus horarios y tiempos.'
      />
      <Description
          svg="Megaphone"
          description="Las clases en vivo vía Zoom , quedarán grabadas en la plataforma para que las puedas revisar en caso no hayas podido asistir o cuando lo necesites."
      />
      <div class="flex flex-row items-center justify-between bg-white text-black rounded-sm p-4 px-6 shadow-md cursor-pointer hover:bg-gray-50">
        <div class="flex flex-row items-center gap-2">
          <div class="flex items-center justify-center">
            <Icon name="Biblio" class="w-7 h-full"/>
          </div>
          <h1 class="font-bold text-xl">Información del curso</h1>
        </div>
        <div>
          <div class="flex items-center justify-center">
            <Icon name="DropArrow" class="w-7 h-full" />
          </div>
        </div>
      </div>
      <div class="pt-4">
        <h1 class="font-bold text-xl">Total de unidades ({units.length})</h1>
        <div class="flex flex-col gap-4 pt-4">
          {units.length > 0 ? (
              units.map((unit, index) => (
                  <Week key={unit.id} numberWeek={`Unidad ${unit.title.toString().padStart(2, '0')}`} />
              ))
          ) : (
              <p class="text-gray-500">No hay unidades disponibles en este curso.</p>
          )}
        </div>
      </div>
    </div>
  </main>
</Layout>
